let Koa,Router,bodyParser,mongoose,api,jwtMiddleware;_0c3‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_0c3‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_0c3‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_0c3‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_0c3‍.w("./api",[["default",["api"],function(v){api=v}]]);_0c3‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config()





// import createFakeData from './createFakeData';


const { PORT, MONGO_URI } = process.env;

mongoose
    .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
    .then(() => {
        console.log('connected to MongoDB');
    }).catch(e => {
        _0c3‍.g.console.error(e);
    })


const app = new Koa();
const router = new Router();

router.use('/api', api.routes());

app.use(bodyParser());
app.use(jwtMiddleware);

app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;

app.listen(4000, () => {
    _0c3‍.g.console.log("Listening to port %d", port);
});
